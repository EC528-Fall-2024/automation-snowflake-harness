---
import { SIDEBAR } from '@/i18n/sidebar'
import { type LanguageKeys, MISC } from '@/i18n/ui'
import PreviousNextPageLink from '@/components/navigation/PreviousNextPageLink.astro'
import type { Section } from '@/types'

const { lang } = Astro.props as { lang: LanguageKeys }

const linksArray = Object.entries(SIDEBAR[lang]).map(([key, value]) => {
  if (typeof value === 'string') {
    return {
      link: `${lang}/${key}`,
      t: value,
    }
  } else {
    const sectionKey = key

    return Object.entries((value as Section).sectionItems).map(
      ([key, value]) => {
        if (typeof value === 'string') {
          return {
            link: `${lang}/${sectionKey}/${key}`,
            t: value,
          }
        } else {
          const subsectionKey = key
          return Object.entries(value.subsectionItems).map(([key, value]) => {
            return {
              link: `${lang}/${sectionKey}/${subsectionKey}/${key}`,
              t: value,
            }
          })
        }
      },
    )
  }
})

const flattenedLinksArray = linksArray.flat(Infinity) as {
  link: string
  t: string
}[]

const getLinkIndex = () => {
  for (let i = 0; i < flattenedLinksArray.length; i++) {
    if (Astro.url.pathname.includes(flattenedLinksArray[i].link)) {
      return i
    }
  }
}

const index = getLinkIndex() as number
---

<div
  class="mb-20 grid grid-cols-2 gap-5 px-10 w800:px-8 w500:grid-cols-1 w500:px-5"
>
  <div>
    {
      index !== 0 && (
        <PreviousNextPageLink
          t={flattenedLinksArray[index - 1].t}
          link={flattenedLinksArray[index - 1].link}
          text={MISC[lang].previous}
        />
      )
    }
  </div>
  <div>
    {
      index !== flattenedLinksArray.length - 1 && (
        <PreviousNextPageLink
          t={flattenedLinksArray[index + 1].t}
          link={flattenedLinksArray[index + 1].link}
          text={MISC[lang].next}
          isNext
        />
      )
    }
  </div>
</div>
